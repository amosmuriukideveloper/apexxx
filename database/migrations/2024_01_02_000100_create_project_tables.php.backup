<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        // Projects Table
        Schema::create('projects', function (Blueprint $table) {
            $table->id();
            $table->string('project_number')->unique();
            $table->foreignId('student_id')->constrained('users');
            $table->foreignId('expert_id')->nullable()->constrained('users');
            $table->foreignId('assigned_by')->nullable()->constrained('users');
            
            // Project Details
            $table->string('title');
            $table->text('description');
            $table->foreignId('subject_id')->constrained('subjects');
            $table->string('project_type'); // Essay, Research, Case Study, etc.
            $table->enum('complexity_level', ['basic', 'intermediate', 'advanced', 'expert'])->default('intermediate');
            $table->integer('word_count')->nullable();
            $table->integer('page_count')->nullable();
            $table->text('special_instructions')->nullable();
            
            // Deadlines
            $table->timestamp('deadline');
            $table->timestamp('original_deadline');
            $table->integer('urgency_hours'); // Hours until deadline
            $table->decimal('urgency_multiplier', 3, 2)->default(1.00);
            
            // Pricing
            $table->decimal('base_price', 10, 2);
            $table->decimal('urgency_fee', 10, 2)->default(0);
            $table->decimal('complexity_fee', 10, 2)->default(0);
            $table->decimal('total_price', 10, 2);
            $table->decimal('expert_earnings', 10, 2)->nullable();
            $table->decimal('platform_fee', 10, 2)->nullable();
            
            // Status Management
            $table->enum('status', [
                'pending_payment',
                'awaiting_assignment',
                'assigned',
                'declined',
                'in_progress',
                'submitted',
                'under_review',
                'revision_required',
                'revision_in_progress',
                'approved',
                'delivered',
                'completed',
                'cancelled',
                'disputed'
            ])->default('pending_payment');
            
            // Workflow Tracking
            $table->timestamp('paid_at')->nullable();
            $table->timestamp('assigned_at')->nullable();
            $table->timestamp('accepted_at')->nullable();
            $table->timestamp('started_at')->nullable();
            $table->timestamp('submitted_at')->nullable();
            $table->timestamp('reviewed_at')->nullable();
            $table->timestamp('delivered_at')->nullable();
            $table->timestamp('completed_at')->nullable();
            
            // Quality Metrics
            $table->integer('turnitin_score')->nullable();
            $table->integer('ai_detection_score')->nullable();
            $table->integer('revision_count')->default(0);
            $table->integer('student_rating')->nullable();
            $table->text('student_review')->nullable();
            
            // Files
            $table->json('reference_files')->nullable();
            $table->json('deliverable_files')->nullable();
            $table->string('turnitin_report')->nullable();
            $table->string('ai_report')->nullable();
            
            $table->timestamps();
            $table->softDeletes();
            
            $table->index(['student_id', 'status']);
            $table->index(['expert_id', 'status']);
            $table->index('deadline');
        });
        
        // Project Transactions
        Schema::create('project_transactions', function (Blueprint $table) {
            $table->id();
            $table->string('transaction_number')->unique();
            $table->foreignId('project_id')->constrained()->onDelete('cascade');
            $table->foreignId('user_id')->constrained();
            
            $table->decimal('amount', 10, 2);
            $table->enum('type', ['payment', 'refund', 'payout']);
            $table->enum('payment_method', ['mpesa', 'paypal', 'pesapal', 'card', 'bank']);
            $table->enum('status', ['pending', 'processing', 'completed', 'failed', 'cancelled'])->default('pending');
            
            // Payment Gateway Details
            $table->string('gateway_transaction_id')->nullable();
            $table->string('phone_number')->nullable(); // For M-Pesa
            $table->text('gateway_response')->nullable();
            $table->text('gateway_callback')->nullable();
            
            // Receipt
            $table->string('receipt_number')->nullable();
            $table->timestamp('completed_at')->nullable();
            
            $table->timestamps();
        });
        
        // Project Submissions
        Schema::create('project_submissions', function (Blueprint $table) {
            $table->id();
            $table->foreignId('project_id')->constrained()->onDelete('cascade');
            $table->foreignId('expert_id')->constrained('users');
            $table->integer('version')->default(1);
            
            $table->enum('type', ['initial', 'revision', 'final']);
            $table->text('submission_notes')->nullable();
            $table->json('files');
            $table->string('turnitin_report')->nullable();
            $table->string('ai_report')->nullable();
            $table->integer('turnitin_score')->nullable();
            $table->integer('ai_score')->nullable();
            
            $table->enum('status', ['submitted', 'under_review', 'approved', 'rejected', 'revision_requested'])->default('submitted');
            $table->text('review_notes')->nullable();
            $table->foreignId('reviewed_by')->nullable()->constrained('users');
            $table->timestamp('reviewed_at')->nullable();
            
            $table->timestamps();
        });
        
        // Project Revisions
        Schema::create('project_revisions', function (Blueprint $table) {
            $table->id();
            $table->foreignId('project_id')->constrained()->onDelete('cascade');
            $table->foreignId('submission_id')->constrained('project_submissions');
            $table->foreignId('requested_by')->constrained('users');
            $table->enum('requester_type', ['admin', 'student']);
            
            $table->text('revision_notes');
            $table->json('specific_changes')->nullable();
            $table->timestamp('deadline_extension')->nullable();
            $table->enum('status', ['pending', 'in_progress', 'completed'])->default('pending');
            
            $table->timestamp('completed_at')->nullable();
            $table->timestamps();
        });
        
        // Project Messages
        Schema::create('project_messages', function (Blueprint $table) {
            $table->id();
            $table->foreignId('project_id')->constrained()->onDelete('cascade');
            $table->foreignId('sender_id')->constrained('users');
            $table->enum('sender_type', ['student', 'expert', 'admin']);
            
            $table->text('message');
            $table->json('attachments')->nullable();
            $table->boolean('is_read')->default(false);
            $table->timestamp('read_at')->nullable();
            
            $table->timestamps();
        });
        
        // Project Progress Notes
        Schema::create('project_progress_notes', function (Blueprint $table) {
            $table->id();
            $table->foreignId('project_id')->constrained()->onDelete('cascade');
            $table->foreignId('expert_id')->constrained('users');
            
            $table->text('note');
            $table->integer('progress_percentage')->default(0);
            $table->boolean('visible_to_admin')->default(true);
            
            $table->timestamps();
        });
        
        // Project Time Tracking
        Schema::create('project_time_logs', function (Blueprint $table) {
            $table->id();
            $table->foreignId('project_id')->constrained()->onDelete('cascade');
            $table->foreignId('expert_id')->constrained('users');
            
            $table->timestamp('started_at');
            $table->timestamp('ended_at')->nullable();
            $table->integer('duration_minutes')->nullable();
            $table->text('activity_description')->nullable();
            
            $table->timestamps();
        });
        
        // Expert Declinations
        Schema::create('expert_declinations', function (Blueprint $table) {
            $table->id();
            $table->foreignId('project_id')->constrained()->onDelete('cascade');
            $table->foreignId('expert_id')->constrained('users');
            
            $table->text('reason');
            $table->enum('reason_category', ['workload', 'expertise', 'deadline', 'other']);
            
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('expert_declinations');
        Schema::dropIfExists('project_time_logs');
        Schema::dropIfExists('project_progress_notes');
        Schema::dropIfExists('project_messages');
        Schema::dropIfExists('project_revisions');
        Schema::dropIfExists('project_submissions');
        Schema::dropIfExists('project_transactions');
        Schema::dropIfExists('projects');
    }
};
