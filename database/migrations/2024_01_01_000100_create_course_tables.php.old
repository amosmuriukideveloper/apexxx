<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        // Course Categories (must be created first)
        Schema::create('course_categories', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('slug')->unique();
            $table->text('description')->nullable();
            $table->foreignId('parent_id')->nullable()->constrained('course_categories');
            $table->string('icon')->nullable();
            $table->boolean('is_active')->default(true);
            $table->integer('sort_order')->default(0);
            $table->timestamps();
        });

        // Courses Table
        Schema::create('courses', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->string('slug')->unique();
            $table->text('description');
            $table->text('short_description')->nullable();
            $table->foreignId('creator_id')->constrained('users');
            $table->foreignId('category_id')->constrained('course_categories');
            $table->decimal('price', 10, 2);
            $table->decimal('sale_price', 10, 2)->nullable();
            $table->string('thumbnail')->nullable();
            $table->string('intro_video')->nullable();
            $table->enum('difficulty', ['beginner', 'intermediate', 'advanced']);
            $table->enum('status', ['draft', 'pending_review', 'approved', 'published', 'rejected'])->default('draft');
            $table->text('rejection_reason')->nullable();
            $table->foreignId('approved_by')->nullable()->constrained('users');
            $table->timestamp('approved_at')->nullable();
            $table->timestamp('published_at')->nullable();
            $table->integer('total_duration_minutes')->default(0);
            $table->integer('total_lectures')->default(0);
            $table->integer('total_reviews')->default(0);
            $table->integer('total_enrollments')->default(0);
            $table->decimal('average_rating', 3, 1)->nullable();
            $table->boolean('is_featured')->default(false);
            $table->string('language')->default('en');
            $table->json('objectives')->nullable();
            $table->json('requirements')->nullable();
            $table->json('target_audience')->nullable();
            $table->boolean('certificate_available')->default(false);
            $table->timestamps();
            $table->softDeletes();
        });

        // Course Sections
        Schema::create('course_sections', function (Blueprint $table) {
            $table->id();
            $table->foreignId('course_id')->constrained()->onDelete('cascade');
            $table->string('title');
            $table->text('description')->nullable();
            $table->integer('sort_order')->default(0);
            $table->boolean('is_published')->default(true);
            $table->integer('duration_minutes')->default(0);
            $table->timestamps();
        });

        // Course Lectures
        Schema::create('course_lectures', function (Blueprint $table) {
            $table->id();
            $table->foreignId('section_id')->constrained('course_sections')->onDelete('cascade');
            $table->string('title');
            $table->text('description')->nullable();
            $table->enum('type', ['video', 'article', 'quiz', 'assignment']);
            $table->text('content')->nullable(); // For articles/HTML content
            $table->string('video_path')->nullable();
            $table->integer('video_duration')->nullable(); // in seconds
            $table->boolean('is_preview')->default(false);
            $table->integer('sort_order')->default(0);
            $table->json('attachments')->nullable();
            $table->timestamps();
        });

        // Course Quizzes
        Schema::create('course_quizzes', function (Blueprint $table) {
            $table->id();
            $table->foreignId('lecture_id')->constrained('course_lectures')->onDelete('cascade');
            $table->string('title');
            $table->text('description')->nullable();
            $table->integer('time_limit')->nullable(); // in minutes
            $table->integer('passing_score')->default(70); // percentage
            $table->integer('max_attempts')->default(1);
            $table->boolean('randomize_questions')->default(false);
            $table->timestamps();
        });

        // Quiz Questions
        Schema::create('quiz_questions', function (Blueprint $table) {
            $table->id();
            $table->foreignId('quiz_id')->constrained('course_quizzes')->onDelete('cascade');
            $table->text('question');
            $table->enum('type', ['multiple_choice', 'true_false', 'short_answer', 'essay']);
            $table->integer('points')->default(1);
            $table->text('explanation')->nullable();
            $table->integer('sort_order')->default(0);
            $table->timestamps();
        });

        // Quiz Answers
        Schema::create('quiz_answers', function (Blueprint $table) {
            $table->id();
            $table->foreignId('question_id')->constrained('quiz_questions')->onDelete('cascade');
            $table->text('answer');
            $table->boolean('is_correct')->default(false);
            $table->integer('sort_order')->default(0);
            $table->timestamps();
        });

        // Course Enrollments
        Schema::create('course_enrollments', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained();
            $table->foreignId('course_id')->constrained();
            $table->timestamp('completed_at')->nullable();
            $table->decimal('amount_paid', 10, 2);
            $table->string('payment_method');
            $table->string('transaction_id')->nullable();
            $table->enum('status', ['active', 'completed', 'dropped', 'refunded'])->default('active');
            $table->timestamps();
            
            $table->unique(['user_id', 'course_id']);
        });

        // User Progress
        Schema::create('user_progress', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained();
            $table->foreignId('enrollment_id')->constrained('course_enrollments');
            $table->foreignId('lecture_id')->constrained('course_lectures');
            $table->boolean('is_completed')->default(false);
            $table->integer('progress_percentage')->default(0);
            $table->timestamp('completed_at')->nullable();
            $table->timestamps();
            
            $table->unique(['user_id', 'enrollment_id', 'lecture_id']);
        });

        // Quiz Attempts
        Schema::create('quiz_attempts', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained();
            $table->foreignId('quiz_id')->constrained('course_quizzes');
            $table->foreignId('enrollment_id')->constrained('course_enrollments');
            $table->integer('attempt_number');
            $table->integer('score')->nullable();
            $table->integer('max_score');
            $table->boolean('is_passed')->default(false);
            $table->timestamp('started_at');
            $table->timestamp('completed_at')->nullable();
            $table->timestamps();
        });

        // Quiz Attempt Answers
        Schema::create('quiz_attempt_answers', function (Blueprint $table) {
            $table->id();
            $table->foreignId('attempt_id')->constrained('quiz_attempts')->onDelete('cascade');
            $table->foreignId('question_id')->constrained('quiz_questions');
            $table->text('answer')->nullable();
            $table->boolean('is_correct')->nullable();
            $table->integer('points_earned')->default(0);
            $table->text('feedback')->nullable();
            $table->timestamps();
        });

        // Course Certificates
        Schema::create('certificates', function (Blueprint $table) {
            $table->id();
            $table->string('certificate_number')->unique();
            $table->foreignId('user_id')->constrained();
            $table->foreignId('course_id')->constrained();
            $table->foreignId('enrollment_id')->constrained('course_enrollments');
            $table->string('verification_code')->unique();
            $table->timestamp('issued_at');
            $table->text('metadata')->nullable();
            $table->timestamps();
        });

        // Course Reviews
        Schema::create('course_reviews', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained();
            $table->foreignId('course_id')->constrained();
            $table->foreignId('enrollment_id')->constrained('course_enrollments');
            $table->integer('rating'); // 1-5
            $table->text('review')->nullable();
            $table->boolean('is_approved')->default(false);
            $table->timestamps();
            
            $table->unique(['user_id', 'course_id']);
        });

        // Creator Payouts
        Schema::create('creator_payouts', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained();
            $table->decimal('amount', 10, 2);
            $table->string('payment_method');
            $table->string('transaction_id')->nullable();
            $table->enum('status', ['pending', 'processing', 'completed', 'failed'])->default('pending');
            $table->text('notes')->nullable();
            $table->timestamps();
        });

        // Course Enrollments to Payouts (Many-to-Many)
        Schema::create('enrollment_payouts', function (Blueprint $table) {
            $table->id();
            $table->foreignId('enrollment_id')->constrained('course_enrollments');
            $table->foreignId('payout_id')->constrained('creator_payouts');
            $table->decimal('amount', 10, 2);
            $table->decimal('platform_fee', 10, 2);
            $table->decimal('creator_earnings', 10, 2);
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('enrollment_payouts');
        Schema::dropIfExists('creator_payouts');
        Schema::dropIfExists('course_reviews');
        Schema::dropIfExists('certificates');
        Schema::dropIfExists('quiz_attempt_answers');
        Schema::dropIfExists('quiz_attempts');
        Schema::dropIfExists('user_progress');
        Schema::dropIfExists('course_enrollments');
        Schema::dropIfExists('quiz_answers');
        Schema::dropIfExists('quiz_questions');
        Schema::dropIfExists('course_quizzes');
        Schema::dropIfExists('course_lectures');
        Schema::dropIfExists('course_sections');
        Schema::dropIfExists('courses');
        Schema::dropIfExists('course_categories');
    }
};
